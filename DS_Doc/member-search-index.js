memberSearchIndex = [{"p":"com.myjava","c":"circularQueue","l":"add(int)"},{"p":"com.myjava","c":"LLQueue","l":"add(int)"},{"p":"com.myjava","c":"MyQueue","l":"add(int)"},{"p":"com.myjava","c":"StQueue","l":"add(int)"},{"p":"com.myjava","c":"MyStack","l":"addBottom(int)"},{"p":"com.myjava","c":"MyLinkedList","l":"addFirst(String)","u":"addFirst(java.lang.String)"},{"p":"com.myjava","c":"MyLinkedList","l":"addLast(String)","u":"addLast(java.lang.String)"},{"p":"com.myjava","c":"MyHashMap.HashMap","l":"Allkeyset()"},{"p":"com.myjava","c":"MyTrie","l":"ans"},{"p":"com.myjava","c":"circularQueue","l":"arr"},{"p":"com.myjava","c":"MyQueue","l":"arr"},{"p":"com.myjava","c":"MyTrees","l":"arrangeNodes(int[])"},{"p":"com.myjava","c":"MyGraph","l":"bfs(ArrayList<MyGraph.Edge>[], int, boolean[], int)","u":"bfs(java.util.ArrayList[],int,boolean[],int)"},{"p":"com.myjava","c":"BinaryTree","l":"BinaryTree()","u":"%3Cinit%3E()"},{"p":"com.myjava","c":"MyHashMap.HashMap","l":"buckets"},{"p":"com.myjava","c":"MyTrie.Node","l":"children"},{"p":"com.myjava","c":"circularQueue","l":"circularQueue(int)","u":"%3Cinit%3E(int)"},{"p":"com.myjava","c":"MyHashMap.HashMap","l":"containsKey(k)"},{"p":"com.myjava","c":"MyTrie","l":"countNodes(MyTrie.Node)","u":"countNodes(com.myjava.MyTrie.Node)"},{"p":"com.myjava","c":"MyTrie","l":"countUniqSubstrings()"},{"p":"com.myjava","c":"MyGraph","l":"createCyclicGraph(ArrayList<MyGraph.Edge>[])","u":"createCyclicGraph(java.util.ArrayList[])"},{"p":"com.myjava","c":"MyGraph","l":"createGraph(ArrayList<MyGraph.Edge>[])","u":"createGraph(java.util.ArrayList[])"},{"p":"com.myjava","c":"MyGraph","l":"CreateGraph3(ArrayList<MyGraph.Edge>[])","u":"CreateGraph3(java.util.ArrayList[])"},{"p":"com.myjava","c":"MyGraph","l":"CreateGraph4(ArrayList<MyGraph.Edge>[])","u":"CreateGraph4(java.util.ArrayList[])"},{"p":"com.myjava","c":"BinaryTree.Node","l":"data"},{"p":"com.myjava","c":"LLQueue.Node","l":"data"},{"p":"com.myjava","c":"MyLinkedList.Node","l":"data"},{"p":"com.myjava","c":"MyStack.Node","l":"data"},{"p":"com.myjava","c":"MyTrees.Node","l":"data"},{"p":"com.myjava","c":"MyLinkedList","l":"deleteFirst()"},{"p":"com.myjava","c":"MyLinkedList","l":"deleteLast()"},{"p":"com.myjava","c":"MyLinkedList","l":"deleteNnode(int)"},{"p":"com.myjava","c":"BinaryTree","l":"deleteNode(BinaryTree.Node, int)","u":"deleteNode(com.myjava.BinaryTree.Node,int)"},{"p":"com.myjava","c":"MyGraph.Edge","l":"dest"},{"p":"com.myjava","c":"MyGraph","l":"dfs(ArrayList<MyGraph.Edge>[], int, boolean[])","u":"dfs(java.util.ArrayList[],int,boolean[])"},{"p":"com.myjava","c":"MyTrees.treeInfo","l":"diameter"},{"p":"com.myjava","c":"MyTrees","l":"diameter(MyTrees.Node)","u":"diameter(com.myjava.MyTrees.Node)"},{"p":"com.myjava","c":"MyTrees","l":"diameterOpt(MyTrees.Node)","u":"diameterOpt(com.myjava.MyTrees.Node)"},{"p":"com.myjava","c":"MyGraph.Edge","l":"Edge(int, int)","u":"%3Cinit%3E(int,int)"},{"p":"com.myjava","c":"MyTrie.Node","l":"eow"},{"p":"com.myjava","c":"circularQueue","l":"front"},{"p":"com.myjava","c":"MyHashMap.HashMap","l":"get(k)"},{"p":"com.myjava","c":"MyLinkedList","l":"getCycleList()"},{"p":"com.myjava","c":"MyLinkedList","l":"getCycleNode()"},{"p":"com.myjava","c":"MyTrees","l":"getHeight(MyTrees.Node)","u":"getHeight(com.myjava.MyTrees.Node)"},{"p":"com.myjava","c":"MyTrees","l":"getInOrder(MyTrees.Node)","u":"getInOrder(com.myjava.MyTrees.Node)"},{"p":"com.myjava","c":"MyTrees","l":"getlevelOrder(MyTrees.Node)","u":"getlevelOrder(com.myjava.MyTrees.Node)"},{"p":"com.myjava","c":"MyTrie","l":"getLongestWord()"},{"p":"com.myjava","c":"MyLinkedList","l":"getMiddle()"},{"p":"com.myjava","c":"MyTrees","l":"getNodesCount(MyTrees.Node)","u":"getNodesCount(com.myjava.MyTrees.Node)"},{"p":"com.myjava","c":"BinaryTree","l":"getPaths(BinaryTree.Node, ArrayList<Integer>)","u":"getPaths(com.myjava.BinaryTree.Node,java.util.ArrayList)"},{"p":"com.myjava","c":"MyTrees","l":"getPostOrder(MyTrees.Node)","u":"getPostOrder(com.myjava.MyTrees.Node)"},{"p":"com.myjava","c":"MyTrees","l":"getPreOrder(MyTrees.Node)","u":"getPreOrder(com.myjava.MyTrees.Node)"},{"p":"com.myjava","c":"MyLinkedList","l":"getSize()"},{"p":"com.myjava","c":"MyTrees","l":"getSum(MyTrees.Node)","u":"getSum(com.myjava.MyTrees.Node)"},{"p":"com.myjava","c":"MyHashMap.HashMap","l":"hashFunction(k)"},{"p":"com.myjava","c":"MyHashMap.HashMap","l":"HashMap()","u":"%3Cinit%3E()"},{"p":"com.myjava","c":"LLQueue","l":"head"},{"p":"com.myjava","c":"MyLinkedList","l":"head"},{"p":"com.myjava","c":"MyStack","l":"head"},{"p":"com.myjava","c":"MyTrees.treeInfo","l":"height"},{"p":"com.myjava","c":"MyTrees","l":"idx"},{"p":"com.myjava","c":"BinaryTree","l":"inOrder(BinaryTree.Node)","u":"inOrder(com.myjava.BinaryTree.Node)"},{"p":"com.myjava","c":"BinaryTree","l":"inorderSuccessor(BinaryTree.Node)","u":"inorderSuccessor(com.myjava.BinaryTree.Node)"},{"p":"com.myjava","c":"BinaryTree","l":"insert(BinaryTree.Node, int)","u":"insert(com.myjava.BinaryTree.Node,int)"},{"p":"com.myjava","c":"MyTrie","l":"insert(String)","u":"insert(java.lang.String)"},{"p":"com.myjava","c":"MyLinkedList","l":"isCycle()"},{"p":"com.myjava","c":"MyGraph","l":"isCyclic(ArrayList<MyGraph.Edge>[], boolean[], int, boolean[])","u":"isCyclic(java.util.ArrayList[],boolean[],int,boolean[])"},{"p":"com.myjava","c":"circularQueue","l":"isEmpty()"},{"p":"com.myjava","c":"LLQueue","l":"isEmpty()"},{"p":"com.myjava","c":"MyHashMap.HashMap","l":"isEmpty()"},{"p":"com.myjava","c":"MyQueue","l":"isEmpty()"},{"p":"com.myjava","c":"MyStack","l":"isEmpty()"},{"p":"com.myjava","c":"MyStackAl","l":"isEmpty()"},{"p":"com.myjava","c":"StQueue","l":"isEmpty()"},{"p":"com.myjava","c":"circularQueue","l":"isFull()"},{"p":"com.myjava","c":"MyTrees","l":"IsIdentical(MyTrees.Node, MyTrees.Node)","u":"IsIdentical(com.myjava.MyTrees.Node,com.myjava.MyTrees.Node)"},{"p":"com.myjava","c":"MyLinkedList","l":"isPlaindrome()"},{"p":"com.myjava","c":"MyTrees","l":"IsSubTree(MyTrees.Node, MyTrees.Node)","u":"IsSubTree(com.myjava.MyTrees.Node,com.myjava.MyTrees.Node)"},{"p":"com.myjava","c":"MyGraph","l":"isUndirectedCyclic(ArrayList<MyGraph.Edge>[], boolean[], int, int)","u":"isUndirectedCyclic(java.util.ArrayList[],boolean[],int,int)"},{"p":"com.myjava","c":"MyHashMap.HashMap.Node","l":"key"},{"p":"com.myjava","c":"BinaryTree.Node","l":"left"},{"p":"com.myjava","c":"MyTrees.Node","l":"left"},{"p":"com.myjava","c":"MyTrees","l":"levelNodeSum(MyTrees.Node, int)","u":"levelNodeSum(com.myjava.MyTrees.Node,int)"},{"p":"com.myjava","c":"LLQueue","l":"LLQueue()","u":"%3Cinit%3E()"},{"p":"com.myjava","c":"MyTrie","l":"longestWord(MyTrie.Node, StringBuilder)","u":"longestWord(com.myjava.MyTrie.Node,java.lang.StringBuilder)"},{"p":"com.myjava","c":"Main","l":"Main()","u":"%3Cinit%3E()"},{"p":"com.myjava","c":"Main","l":"main(String[])","u":"main(java.lang.String[])"},{"p":"com.myjava","c":"MyGraph","l":"MyGraph()","u":"%3Cinit%3E()"},{"p":"com.myjava","c":"MyHashMap","l":"MyHashMap()","u":"%3Cinit%3E()"},{"p":"com.myjava","c":"MyLinkedList","l":"MyLinkedList()","u":"%3Cinit%3E()"},{"p":"com.myjava","c":"MyQueue","l":"MyQueue(int)","u":"%3Cinit%3E(int)"},{"p":"com.myjava","c":"MyStack","l":"MyStack()","u":"%3Cinit%3E()"},{"p":"com.myjava","c":"MyStackAl","l":"MyStackAl()","u":"%3Cinit%3E()"},{"p":"com.myjava","c":"MyTrees","l":"MyTrees()","u":"%3Cinit%3E()"},{"p":"com.myjava","c":"MyTrie","l":"MyTrie()","u":"%3Cinit%3E()"},{"p":"com.myjava","c":"MyHashMap.HashMap","l":"n"},{"p":"com.myjava","c":"MyHashMap.HashMap","l":"N"},{"p":"com.myjava","c":"LLQueue.Node","l":"next"},{"p":"com.myjava","c":"MyLinkedList.Node","l":"next"},{"p":"com.myjava","c":"MyStack.Node","l":"next"},{"p":"com.myjava","c":"MyTrie.Node","l":"Node()","u":"%3Cinit%3E()"},{"p":"com.myjava","c":"BinaryTree.Node","l":"Node(int)","u":"%3Cinit%3E(int)"},{"p":"com.myjava","c":"LLQueue.Node","l":"Node(int)","u":"%3Cinit%3E(int)"},{"p":"com.myjava","c":"MyStack.Node","l":"Node(int)","u":"%3Cinit%3E(int)"},{"p":"com.myjava","c":"MyTrees.Node","l":"Node(int)","u":"%3Cinit%3E(int)"},{"p":"com.myjava","c":"MyHashMap.HashMap.Node","l":"Node(k, v)","u":"%3Cinit%3E(k,v)"},{"p":"com.myjava","c":"MyLinkedList.Node","l":"Node(String)","u":"%3Cinit%3E(java.lang.String)"},{"p":"com.myjava","c":"circularQueue","l":"peek()"},{"p":"com.myjava","c":"LLQueue","l":"peek()"},{"p":"com.myjava","c":"MyQueue","l":"peek()"},{"p":"com.myjava","c":"MyStack","l":"peek()"},{"p":"com.myjava","c":"MyStackAl","l":"peek()"},{"p":"com.myjava","c":"StQueue","l":"peek()"},{"p":"com.myjava","c":"MyStack","l":"pop()"},{"p":"com.myjava","c":"MyStackAl","l":"pop()"},{"p":"com.myjava","c":"MyGraph","l":"printAllPaths(ArrayList<MyGraph.Edge>[], boolean[], int, String, int)","u":"printAllPaths(java.util.ArrayList[],boolean[],int,java.lang.String,int)"},{"p":"com.myjava","c":"BinaryTree","l":"printInRange(BinaryTree.Node, int, int)","u":"printInRange(com.myjava.BinaryTree.Node,int,int)"},{"p":"com.myjava","c":"MyLinkedList","l":"printList()"},{"p":"com.myjava","c":"BinaryTree","l":"printPath(ArrayList<Integer>)","u":"printPath(java.util.ArrayList)"},{"p":"com.myjava","c":"MyStack","l":"printStack()"},{"p":"com.myjava","c":"MyStackAl","l":"printStack()"},{"p":"com.myjava","c":"MyStack","l":"push(int)"},{"p":"com.myjava","c":"MyStackAl","l":"push(int)"},{"p":"com.myjava","c":"MyHashMap.HashMap","l":"put(k, v)","u":"put(k,v)"},{"p":"com.myjava","c":"circularQueue","l":"rear"},{"p":"com.myjava","c":"MyQueue","l":"rear"},{"p":"com.myjava","c":"MyHashMap.HashMap","l":"rehash()"},{"p":"com.myjava","c":"circularQueue","l":"remove()"},{"p":"com.myjava","c":"LLQueue","l":"remove()"},{"p":"com.myjava","c":"MyQueue","l":"remove()"},{"p":"com.myjava","c":"StQueue","l":"remove()"},{"p":"com.myjava","c":"MyHashMap.HashMap","l":"remove(k)"},{"p":"com.myjava","c":"MyLinkedList","l":"repairCycle()"},{"p":"com.myjava","c":"MyStack","l":"reverse()"},{"p":"com.myjava","c":"MyLinkedList","l":"reverseList()"},{"p":"com.myjava","c":"MyLinkedList","l":"reverseListRecursive(MyLinkedList.Node)","u":"reverseListRecursive(com.myjava.MyLinkedList.Node)"},{"p":"com.myjava","c":"BinaryTree.Node","l":"right"},{"p":"com.myjava","c":"MyTrees.Node","l":"right"},{"p":"com.myjava","c":"MyTrie","l":"root"},{"p":"com.myjava","c":"StQueue","l":"s1"},{"p":"com.myjava","c":"StQueue","l":"s2"},{"p":"com.myjava","c":"MyTrie","l":"search(String)","u":"search(java.lang.String)"},{"p":"com.myjava","c":"MyHashMap.HashMap","l":"searchInLL(k, int)","u":"searchInLL(k,int)"},{"p":"com.myjava","c":"BinaryTree","l":"searchKey(BinaryTree.Node, int)","u":"searchKey(com.myjava.BinaryTree.Node,int)"},{"p":"com.myjava","c":"circularQueue","l":"size"},{"p":"com.myjava","c":"MyLinkedList","l":"size"},{"p":"com.myjava","c":"MyQueue","l":"size"},{"p":"com.myjava","c":"MyGraph.Edge","l":"src"},{"p":"com.myjava","c":"MyStackAl","l":"stack"},{"p":"com.myjava","c":"MyTrie","l":"startsWith(String)","u":"startsWith(java.lang.String)"},{"p":"com.myjava","c":"StQueue","l":"StQueue()","u":"%3Cinit%3E()"},{"p":"com.myjava","c":"LLQueue","l":"tail"},{"p":"com.myjava","c":"MyGraph","l":"topSort(ArrayList<MyGraph.Edge>[], int)","u":"topSort(java.util.ArrayList[],int)"},{"p":"com.myjava","c":"MyGraph","l":"topSortUtil(ArrayList<MyGraph.Edge>[], int, boolean[], Stack<Integer>)","u":"topSortUtil(java.util.ArrayList[],int,boolean[],java.util.Stack)"},{"p":"com.myjava","c":"MyTrees.treeInfo","l":"treeInfo(int, int)","u":"%3Cinit%3E(int,int)"},{"p":"com.myjava","c":"MyHashMap.HashMap.Node","l":"value"},{"p":"com.myjava","c":"MyTrie","l":"wordBreak(String)","u":"wordBreak(java.lang.String)"}];updateSearchResults();